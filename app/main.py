#!/usr/bin/env python3
"""
Pure Python Debian Package Generator
Creates .deb package with CA cert, server cert, client cert under /opt/config/
"""

import os
import tarfile
import shutil
from jinja2 import Environment, FileSystemLoader
from app.services.certificate_service import generate_certificates


def create_ar_archive(output_file, files):
    """
    Create a Debian-compatible AR archive using pure Python.
    This implementation follows the GNU ar format.
    """
    print(f"Creating AR archive: {output_file}")
    try:
        with open(output_file, 'wb') as ar_file:
            ar_file.write(b'!<arch>\n')

            for file_path in files:
                stat = os.stat(file_path)
                file_size = stat.st_size
                file_name = os.path.basename(file_path)

                header = (
                    f"{file_name:<16}"
                    f"{int(stat.st_mtime):<12}"
                    f"{0:<6}"
                    f"{0:<6}"
                    f"{'100644':<8}"
                    f"{file_size:<10}"
                    "`\n"
                ).encode('ascii')

                ar_file.write(header)
                with open(file_path, 'rb') as f:
                    ar_file.write(f.read())

                if file_size % 2 != 0:
                    ar_file.write(b'\n')
        print("✓ AR archive created successfully")
        return True
    except Exception as e:
        print(f"Error creating AR archive: {e}")
        return False


def set_permissions(file_path, mode):
    """Set file permissions"""
    try:
        os.chmod(file_path, mode)
    except Exception:
        pass


def create_deb_package():
    """
    Create Debian package with certificates and config in /opt/config/
    """

    package_name = "sample-config-pkg"
    version = "1.0.0"
    architecture = "all"
    maintainer = "Admin <admin@example.com>"
    description = "Sample package with certificates and configuration"

    package_dir = f"{package_name}_{version}_{architecture}"
    deb_file = f"{package_dir}.deb"
    build_dir = "build"

    # Correctly locate the debian_templates directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)
    template_dir = os.path.join(project_root, "debian_templates")

    # Clean up
    print("Cleaning up previous builds...")
    for item in [build_dir, deb_file, "debian-binary", "control.tar.gz", "data.tar.gz"]:
        if os.path.exists(item):
            if os.path.isdir(item):
                shutil.rmtree(item)
            else:
                os.remove(item)

    # Create directory structure
    print("Creating package structure...")
    certs_dir = os.path.join(build_dir, "opt", "config", "certs")
    config_dir = os.path.join(build_dir, "opt", "config")
    os.makedirs(certs_dir, exist_ok=True)

    # Generate certificates
    generate_certificates(certs_dir)

    # Set permissions
    for cert_file in ["ca.crt", "server.crt", "client.crt"]:
        set_permissions(os.path.join(certs_dir, cert_file), 0o644)
    for key_file in ["ca.key", "server.key", "client.key"]:
        set_permissions(os.path.join(certs_dir, key_file), 0o600)

    # Create test.conf
    print("Creating test.conf...")
    test_conf_content = """\
# Sample Configuration File
# Generated by sample-config-pkg

[settings]
host=localhost
port=443
ssl_enabled=true

[certificates]
ca_cert=/opt/config/certs/ca.crt
server_cert=/opt/config/certs/server.crt
server_key=/opt/config/certs/server.key
client_cert=/opt/config/certs/client.crt
client_key=/opt/config/certs/client.key

[logging]
log_level=info
log_file=/var/log/sample-app.log
"""

    with open(os.path.join(config_dir, "test.conf"), "w") as f:
        f.write(test_conf_content)

    # Create DEBIAN control directory
    print("Creating control files...")
    control_dir = os.path.join(build_dir, "DEBIAN")
    os.makedirs(control_dir, exist_ok=True)

    # Render Jinja2 templates
    env = Environment(loader=FileSystemLoader(template_dir))
    template_context = {
        "package_name": package_name,
        "version": version,
        "architecture": architecture,
        "maintainer": maintainer,
        "description": description,
    }

    for template_name in ["control", "preinst", "postinst", "postrm"]:
        template = env.get_template(f"{template_name}.j2")
        content = template.render(template_context)
        filepath = os.path.join(control_dir, template_name)
        with open(filepath, "w") as f:
            f.write(content)
        if template_name in ["preinst", "postinst", "postrm"]:
            set_permissions(filepath, 0o755)

    # Create control.tar.gz
    print("Creating control.tar.gz...")
    with tarfile.open("control.tar.gz", "w:gz", format=tarfile.GNU_FORMAT) as tar:
        tar.add(control_dir, arcname=".")

    # Create data.tar.gz
    print("Creating data.tar.gz...")
    with tarfile.open("data.tar.gz", "w:gz", format=tarfile.GNU_FORMAT) as tar:
        for item in os.listdir(build_dir):
            if item != "DEBIAN":
                item_path = os.path.join(build_dir, item)
                tar.add(item_path, arcname=item)

    # Create debian-binary
    print("Creating debian-binary...")
    with open("debian-binary", "w") as f:
        f.write("2.0\n")

    # Assemble .deb package
    print("Assembling .deb package...")
    if not create_ar_archive(deb_file, ["debian-binary", "control.tar.gz", "data.tar.gz"]):
        print("Failed to create .deb package. Aborting.")
        return

    print(f"\n✓ Package created: {deb_file}")
    print(f"✓ Package size: {os.path.getsize(deb_file)} bytes")

    # Cleanup
    print("\nCleaning up...")
    shutil.rmtree(build_dir)
    os.remove("debian-binary")
    os.remove("control.tar.gz")
    os.remove("data.tar.gz")

    print("\n" + "="*60)
    print("PACKAGE BUILD COMPLETE")
    print("="*60)
    print(f"Package: {deb_file}")
    print("\nVerify (macOS):")
    print(f"  ar -x {deb_file}")
    print("\nInstall (Ubuntu):")
    print(f"  sudo apt install ./{deb_file}")
    print("="*60)


if __name__ == "__main__":
    try:
        print("="*60)
        print("Debian Package Generator")
        print("="*60)
        print()
        create_deb_package()
    except Exception as e:
        print(f"\nError: {e}")
        import traceback
        traceback.print_exc()
        exit(1)