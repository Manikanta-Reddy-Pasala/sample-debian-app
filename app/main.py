#!/usr/bin/env python3
"""
Pure Python Debian Package Generator
Creates .deb package with CA cert, server cert, client cert under /opt/config/
"""

import os
import shutil
from deb_pkg_tools.package import build_package
from app.services.certificate_service import generate_certificates


def set_permissions(file_path, mode):
    """Set file permissions"""
    try:
        os.chmod(file_path, mode)
    except Exception:
        pass


def create_deb_package():
    """
    Create Debian package with certificates and config in /opt/config/
    """

    package_name = "sample-config-pkg"
    version = "1.0.0"
    architecture = "all"
    maintainer = "Admin <admin@example.com>"
    description = "Sample package with certificates and configuration"

    build_dir = "build"
    dist_dir = "dist"

    # Clean up
    print("Cleaning up previous builds...")
    for item in [build_dir, dist_dir]:
        if os.path.exists(item):
            shutil.rmtree(item)

    # Create directories
    os.makedirs(dist_dir, exist_ok=True)

    # Create directory structure
    print("Creating package structure...")
    certs_dir = os.path.join(build_dir, "opt", "config", "certs")
    config_dir = os.path.join(build_dir, "opt", "config")
    os.makedirs(certs_dir, exist_ok=True)

    # Generate certificates
    generate_certificates(certs_dir)

    # Set permissions for certificates
    for cert_file in ["ca.crt", "server.crt", "client.crt"]:
        set_permissions(os.path.join(certs_dir, cert_file), 0o644)
    for key_file in ["ca.key", "server.key", "client.key"]:
        set_permissions(os.path.join(certs_dir, key_file), 0o600)

    # Create test.conf
    print("Creating test.conf...")
    test_conf_content = """\
# Sample Configuration File
# Generated by sample-config-pkg

[settings]
host=localhost
port=443
ssl_enabled=true

[certificates]
ca_cert=/opt/config/certs/ca.crt
server_cert=/opt/config/certs/server.crt
server_key=/opt/config/certs/server.key
client_cert=/opt/config/certs/client.crt
client_key=/opt/config/certs/client.key

[logging]
log_level=info
log_file=/var/log/sample-app.log
"""

    test_conf_path = os.path.join(config_dir, "test.conf")
    with open(test_conf_path, "w", newline='\n') as f:
        f.write(test_conf_content)
    set_permissions(test_conf_path, 0o644)

    # Create DEBIAN control directory
    print("Creating control files...")
    control_dir = os.path.join(build_dir, "DEBIAN")
    os.makedirs(control_dir, exist_ok=True)

    # Create control file
    control_content = f"""\
Package: {package_name}
Version: {version}
Architecture: {architecture}
Maintainer: {maintainer}
Description: {description}
"""
    with open(os.path.join(control_dir, "control"), "w", newline='\n') as f:
        f.write(control_content)

    # Create preinst script
    preinst_content = """\
#!/bin/bash
set -e
echo "Running pre-installation script..."
if [ -d "/opt/config" ]; then
    echo "Backing up existing configuration..."
    if [ -d "/opt/config_backup" ]; then
        rm -rf /opt/config_backup
    fi
    mv /opt/config /opt/config_backup
fi
mkdir -p /opt/config/certs
echo "Pre-installation script finished."
exit 0
"""
    preinst_path = os.path.join(control_dir, "preinst")
    with open(preinst_path, "w", newline='\n') as f:
        f.write(preinst_content)
    set_permissions(preinst_path, 0o755)

    # Create postinst script
    postinst_content = """\
#!/bin/bash
set -e
echo "Running post-installation script..."
chmod 644 /opt/config/certs/*.crt
chmod 600 /opt/config/certs/*.key
chmod 644 /opt/config/test.conf
echo "Post-installation script finished."
exit 0
"""
    postinst_path = os.path.join(control_dir, "postinst")
    with open(postinst_path, "w", newline='\n') as f:
        f.write(postinst_content)
    set_permissions(postinst_path, 0o755)

    # Create postrm script
    postrm_content = """\
#!/bin/bash
set -e
echo "Running post-removal script..."
if [ "$1" = "purge" ]; then
    echo "Purging configuration..."
    if [ -d "/opt/config" ]; then
        rm -rf /opt/config
    fi
    if [ -d "/opt/config_backup" ]; then
        rm -rf /opt/config_backup
    fi
fi
echo "Post-removal script finished."
exit 0
"""
    postrm_path = os.path.join(control_dir, "postrm")
    with open(postrm_path, "w", newline='\n') as f:
        f.write(postrm_content)
    set_permissions(postrm_path, 0o755)

    # Build the package
    print("Building .deb package...")
    deb_file = build_package(build_dir, repository=dist_dir)

    print(f"\n✓ Package created: {deb_file}")
    print(f"✓ Package size: {os.path.getsize(deb_file)} bytes")

    # Cleanup
    print("\nCleaning up...")
    shutil.rmtree(build_dir)

    print("\n" + "="*60)
    print("PACKAGE BUILD COMPLETE")
    print("="*60)
    deb_file_basename = os.path.basename(deb_file)
    print(f"Package: {deb_file_basename}")
    print("\nVerify (macOS):")
    print(f"  ar -x {deb_file_basename}")
    print("\nInstall (Ubuntu):")
    print(f"  sudo apt install ./{deb_file_basename}")
    print("="*60)


if __name__ == "__main__":
    try:
        print("="*60)
        print("Debian Package Generator")
        print("="*60)
        print()
        create_deb_package()
    except Exception as e:
        print(f"\nError: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
